@using System.Globalization
@model Product

<form method="post">
    <div class="card shadow border-0 mt-4 mb-4">
        <div class="card-header bg-secondary bg-gradient text-light py-4">
            <div class="row">
                <div class="col-12 text-center">
                    <h3 class="text-white text-uppercase">@Model.Title</h3>
                    <p class="text-white-50 fw-semibold mb-0">by @Model.Author</p>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="py-3">
                <div class="row">
                    <div class="col-6 col-md-2 offset-lg-1 pb-1">
                        <a asp-action="Index" class="btn btn-outline-primary bg-gradient mb-5 fw-semibold btn-sm text-uppercase">
                            <small>Back to home</small>
                        </a>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 col-lg-3 offset-lg-1 text-center mb-3">
                        <img src="@Model.ImgUrl" width="100%" class="rounded" />
                    </div>
                    <div class="col-12 col-lg-6 offset-lg-1">

                        <div class="bg-warning rounded-1 mb-1 fit-contain category-inline">
                            <span class="badge">@Model.Category?.Name</span>
                        </div>
                        <div class="row ps-2">
                            <h6 class="text-dark text-opacity-50 ">ISBN : @Model.ISBN</h6>
                        </div>
                        <div class="row ps-2">
                            <h6 class="text-body pb-2">
                                Total Price:
                                <span id="totalPrice" class="text-dark">
                                    @Model.ListPrice.ToString("C", new CultureInfo("hi-IN"))
                                </span>
                            </h6>
                        </div>
                        <div class="row text-center ps-2">
                            <div class="p-1 col-3 col-lg-2 bg-white border-bottom">
                                <div class="text-dark text-opacity-50 fw-semibold">Quantity</div>
                            </div>
                            <div class="p-1 col-3 col-lg-2 bg-white border-bottom">
                                <div class="text-dark text-opacity-50 fw-semibold">1-50</div>
                            </div>
                            <div class="p-1 col-3 col-lg-2 bg-white border-bottom">
                                <div class="text-dark text-opacity-50 fw-semibold">51-100</div>
                            </div>
                            <div class="p-1 col-3 col-lg-2 bg-white border-bottom">
                                <div class="text-dark text-opacity-50 fw-semibold">100+</div>
                            </div>
                        </div>
                        <div class="row text-center ps-2">
                            <div class="p-1 col-3 col-lg-2 bg-white text-warning fw-bold">
                                <div>Price</div>
                            </div>
                            <div class="p-1 col-3 col-lg-2 bg-white text-warning fw-bold">
                                <div>@Model.Price.ToString("C", new CultureInfo("hi-IN"))</div>
                            </div>
                            <div class="p-1 col-3 col-lg-2 bg-white text-warning fw-bold">
                                <div>@Model.Price50.ToString("C", new CultureInfo("hi-IN"))</div>
                            </div>
                            <div class="p-1 col-3 col-lg-2 bg-white text-warning fw-bold">
                                <div>@Model.Price100.ToString("C", new CultureInfo("hi-IN"))</div>
                            </div>
                        </div>
                        <div class="row pl-2 my-3">
                            <p class="text-secondary lh-sm">@Html.Raw(Model.Description)</p>
                        </div>
                        <div class="row pl-2 mb-3">
                            <div class="col-md-4">
                                <div class="input-group mb-3">
                                    <span class="input-group-text bg-primary text-white border-0 fw-semibold"
                                          id="inputGroup-sizing-default">
                                        Count
                                    </span>
                                    <input id="countInput" type="number" value="1" min="1" class="form-control text-end"
                                           aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" />

                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12 col-md-6 pb-1">
                                <button type="submit" disabled
                                        class="btn btn-primary bg-gradient  w-100 py-2 text-uppercase fw-semibold">
                                    Add to Cart (Comming Soon...)
                                </button>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</form>
<style>
    .category-inline{
        width: fit-content !important;
        margin-left: 7px !important;
    }
</style>
<script>
    document.getElementById("countInput").addEventListener("input",function(){
        if (this.value < 1 || this.value == '') this.value = 1;
    })

    document.addEventListener("DOMContentLoaded", function () {

        const countInput = document.getElementById('countInput');
        const totalPriceSpan = document.getElementById('totalPrice');
        const price = @Model.Price;
        const price50 = @Model.Price50;
        const price100 = @Model.Price100;
        
        function basePriceCalculation(count) {
            if (count >= 50 && count < 100) return price50;
            else if (count >= 100) return price100;
            else return price;
        }

        function updateTotalPrice() {
            let count = parseInt(countInput.value);
            if (isNaN(count) || count < 1) count = 1;
            const basePrice = basePriceCalculation(count);
            const totalPrice = count * basePrice;
            totalPriceSpan.textContent = totalPrice.toLocaleString('hi-IN', { style: 'currency', currency: 'INR' });
        }

        countInput.addEventListener('input', function () {
            if (this.value < 1 || this.value === '') this.value = 1;
            updateTotalPrice();
        });
    })
</script>